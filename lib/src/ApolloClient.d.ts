import { NetworkInterface, ObservableNetworkInterface } from './transport/networkInterface';
import { ApolloLink } from 'apollo-link-core';
import { FragmentMatcherInterface } from './data/fragmentMatcher';
import { ApolloReducerConfig } from './store';
import { CustomResolverMap } from './data/readFromStore';
import { QueryManager } from './core/QueryManager';
import { ApolloQueryResult, ApolloExecutionResult, IdGetter } from './core/types';
import { ObservableQuery } from './core/ObservableQuery';
import { Observable } from './util/Observable';
import { WatchQueryOptions, SubscriptionOptions, MutationOptions } from './core/watchQueryOptions';
import { DataProxy, DataProxyReadQueryOptions, DataProxyReadFragmentOptions, DataProxyWriteQueryOptions, DataProxyWriteFragmentOptions } from './data/proxy';
import { Cache } from './data/cache';
export default class ApolloClient implements DataProxy {
    networkInterface: NetworkInterface;
    initialState: any;
    initialCache: Cache;
    queryManager: QueryManager;
    reducerConfig: ApolloReducerConfig;
    addTypename: boolean;
    disableNetworkFetches: boolean;
    dataId: IdGetter | undefined;
    dataIdFromObject: IdGetter | undefined;
    fieldWithArgs: (fieldName: string, args?: Object) => string;
    version: string;
    queryDeduplication: boolean;
    private devToolsHookCb;
    private proxy;
    private fragmentMatcher;
    private ssrMode;
    constructor(options?: {
        networkInterface?: NetworkInterface | ObservableNetworkInterface | ApolloLink;
        initialState?: any;
        initialCache?: Cache;
        dataIdFromObject?: IdGetter;
        ssrMode?: boolean;
        ssrForceFetchDelay?: number;
        addTypename?: boolean;
        customResolvers?: CustomResolverMap;
        connectToDevTools?: boolean;
        queryDeduplication?: boolean;
        fragmentMatcher?: FragmentMatcherInterface;
    });
    watchQuery<T>(options: WatchQueryOptions): ObservableQuery<T>;
    query<T>(options: WatchQueryOptions): Promise<ApolloQueryResult<T>>;
    mutate<T>(options: MutationOptions<T>): Promise<ApolloExecutionResult<T>>;
    subscribe(options: SubscriptionOptions): Observable<any>;
    readQuery<T>(options: DataProxyReadQueryOptions): T;
    readFragment<T>(options: DataProxyReadFragmentOptions): T | null;
    writeQuery(options: DataProxyWriteQueryOptions): void;
    writeFragment(options: DataProxyWriteFragmentOptions): void;
    __actionHookForDevTools(cb: Function): void;
    initQueryManager(): void;
    resetStore(): Promise<ApolloQueryResult<any>[]> | null;
    private initProxy();
}
